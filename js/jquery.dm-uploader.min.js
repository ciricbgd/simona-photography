function ui_add_log(e, t) {
    var i = new Date,
        n = ("0" + i.getHours()).slice(-2) + ":" + ("0" + i.getMinutes()).slice(-2) + ":" + ("0" + i.getSeconds()).slice(-2);
    t = void 0 === t ? "muted" : t;
    var o = $("#debug-template").text();
    o = (o = (o = o.replace("%%date%%", n)).replace("%%message%%", e)).replace("%%color%%", t), $("#debug").find("li.empty").fadeOut(), $("#debug").prepend(o)
}

function ui_multi_add_file(e, t) {
    var i = $("#files-template").text();
    i = i.replace("%%filename%%", t.name), (i = $(i)).prop("id", "uploaderFile" + e), i.data("file-id", e), $("#files").find("li.empty").fadeOut(), $("#files").prepend(i)
}

function ui_multi_update_file_status(e, t, i) {
    $("#uploaderFile" + e).find("span").html(i).prop("class", "status text-" + t)
}

function ui_multi_update_file_progress(e, t, i, n) {
    i = void 0 !== i && i, n = void 0 === n || n;
    var o = $("#uploaderFile" + e).find("div.progress-bar");
    o.width(t + "%").attr("aria-valuenow", t), o.toggleClass("progress-bar-striped progress-bar-animated", n), 0 === t ? o.html("") : o.html(t + "%"), !1 !== i && (o.removeClass("bg-success bg-info bg-warning bg-danger"), o.addClass("bg-" + i))
}

function ui_multi_update_file_controls(e, t, i, n) {
    n = void 0 !== n && n, $("#uploaderFile" + e).find("button.start").prop("disabled", !t), $("#uploaderFile" + e).find("button.cancel").prop("disabled", !i), t || i ? $("#uploaderFile" + e).find(".controls").fadeIn() : $("#uploaderFile" + e).find(".controls").fadeOut(), n && $("#uploaderFile" + e).find("button.start").html("Retry")
}! function (e) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], e) : "undefined" != typeof exports ? module.exports = e(require("jquery")) : e(window.jQuery)
}(function (e) {
    "use strict";
    var t = "dmUploader",
        i = {
            auto: !0,
            queue: !0,
            dnd: !0,
            hookDocument: !0,
            multiple: !0,
            url: document.URL,
            method: "POST",
            extraData: {},
            headers: {},
            dataType: null,
            fieldName: "file",
            maxFileSize: 0,
            allowedTypes: "*",
            extFilter: null,
            onInit: function () {},
            onComplete: function () {},
            onFallbackMode: function () {},
            onNewFile: function () {},
            onBeforeUpload: function () {},
            onUploadProgress: function () {},
            onUploadSuccess: function () {},
            onUploadCanceled: function () {},
            onUploadError: function () {},
            onUploadComplete: function () {},
            onFileTypeError: function () {},
            onFileSizeError: function () {},
            onFileExtError: function () {},
            onDragEnter: function () {},
            onDragLeave: function () {},
            onDocumentDragEnter: function () {},
            onDocumentDragLeave: function () {}
        },
        n = function (e, t) {
            this.data = e, this.widget = t, this.jqXHR = null, this.status = 0, this.id = Math.random().toString(36).substr(2)
        };
    n.prototype.upload = function () {
        var t = this;
        if (!t.canUpload()) return t.widget.queueRunning && 1 !== t.status && t.widget.processQueue(), !1;
        var i = new FormData;
        i.append(t.widget.settings.fieldName, t.data);
        var n = t.widget.settings.extraData;
        return "function" == typeof n && (n = n.call(t.widget.element, t.id)), e.each(n, function (e, t) {
            i.append(e, t)
        }), t.status = 1, t.widget.activeFiles++, t.widget.settings.onBeforeUpload.call(t.widget.element, t.id), t.jqXHR = e.ajax({
            url: t.widget.settings.url,
            type: t.widget.settings.method,
            dataType: t.widget.settings.dataType,
            data: i,
            headers: t.widget.settings.headers,
            cache: !1,
            contentType: !1,
            processData: !1,
            forceSync: !1,
            xhr: function () {
                return t.getXhr()
            },
            success: function (e) {
                t.onSuccess(e)
            },
            error: function (e, i, n) {
                t.onError(e, i, n)
            },
            complete: function () {
                t.onComplete()
            }
        }), !0
    }, n.prototype.onSuccess = function (e) {
        this.status = 2, this.widget.settings.onUploadSuccess.call(this.widget.element, this.id, e)
    }, n.prototype.onError = function (e, t, i) {
        4 !== this.status && (this.status = 3, this.widget.settings.onUploadError.call(this.widget.element, this.id, e, t, i))
    }, n.prototype.onComplete = function () {
        this.widget.activeFiles--, 4 !== this.status && this.widget.settings.onUploadComplete.call(this.widget.element, this.id), this.widget.queueRunning ? this.widget.processQueue() : this.widget.settings.queue && 0 === this.widget.activeFiles && this.widget.settings.onComplete.call(this.element)
    }, n.prototype.getXhr = function () {
        var t = this,
            i = e.ajaxSettings.xhr();
        return i.upload && i.upload.addEventListener("progress", function (e) {
            var i = 0,
                n = e.loaded || e.position,
                o = e.total || e.totalSize;
            e.lengthComputable && (i = Math.ceil(n / o * 100)), t.widget.settings.onUploadProgress.call(t.widget.element, t.id, i)
        }, !1), i
    }, n.prototype.cancel = function (e) {
        e = void 0 !== e && e;
        var t = this.status;
        return !!(1 === t || e && 0 === t) && (this.status = 4, this.widget.settings.onUploadCanceled.call(this.widget.element, this.id), 1 === t && this.jqXHR.abort(), !0)
    }, n.prototype.canUpload = function () {
        return 0 === this.status || 3 === this.status
    };
    var o = function (t, n) {
        return this.element = e(t), this.settings = e.extend({}, i, n), this.checkSupport() ? (this.init(), this) : (e.error("Browser not supported by jQuery.dmUploader"), this.settings.onFallbackMode.call(this.element), !1)
    };
    o.prototype.checkSupport = function () {
        return void 0 !== window.FormData && (!new RegExp("/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1.0|2.0|2.5|3.0))/").test(window.navigator.userAgent) && !e('<input type="file" />').prop("disabled"))
    }, o.prototype.init = function () {
        var i = this;
        this.queue = [], this.queuePos = -1, this.queueRunning = !1, this.activeFiles = 0, this.draggingOver = 0, this.draggingOverDoc = 0;
        var n = i.element.is("input[type=file]") ? i.element : i.element.find("input[type=file]");
        return n.length > 0 && (n.prop("multiple", this.settings.multiple), n.on("change." + t, function (t) {
            var n = t.target && t.target.files;
            n && n.length && (i.addFiles(n), e(this).val(""))
        })), this.settings.dnd && this.initDnD(), 0 !== n.length || this.settings.dnd ? (this.settings.onInit.call(this.element), this) : (e.error("Markup error found by jQuery.dmUploader"), null)
    }, o.prototype.initDnD = function () {
        var i = this;
        i.element.on("drop." + t, function (e) {
            e.preventDefault(), i.draggingOver > 0 && (i.draggingOver = 0, i.settings.onDragLeave.call(i.element));
            var t = e.originalEvent && e.originalEvent.dataTransfer;
            if (t && t.files && t.files.length) {
                var n = [];
                i.settings.multiple ? n = t.files : n.push(t.files[0]), i.addFiles(n)
            }
        }), i.element.on("dragenter." + t, function (e) {
            e.preventDefault(), 0 === i.draggingOver && i.settings.onDragEnter.call(i.element), i.draggingOver++
        }), i.element.on("dragleave." + t, function (e) {
            e.preventDefault(), 0 === --i.draggingOver && i.settings.onDragLeave.call(i.element)
        }), i.settings.hookDocument && (e(document).off("drop." + t).on("drop." + t, function (e) {
            e.preventDefault(), i.draggingOverDoc > 0 && (i.draggingOverDoc = 0, i.settings.onDocumentDragLeave.call(i.element))
        }), e(document).off("dragenter." + t).on("dragenter." + t, function (e) {
            e.preventDefault(), 0 === i.draggingOverDoc && i.settings.onDocumentDragEnter.call(i.element), i.draggingOverDoc++
        }), e(document).off("dragleave." + t).on("dragleave." + t, function (e) {
            e.preventDefault(), 0 === --i.draggingOverDoc && i.settings.onDocumentDragLeave.call(i.element)
        }), e(document).off("dragover." + t).on("dragover." + t, function (e) {
            e.preventDefault()
        }))
    }, o.prototype.releaseEvents = function () {
        this.element.off("." + t), this.element.find("input[type=file]").off("." + t), this.settings.hookDocument && e(document).off("." + t)
    }, o.prototype.validateFile = function (t) {
        if (this.settings.maxFileSize > 0 && t.size > this.settings.maxFileSize) return this.settings.onFileSizeError.call(this.element, t), !1;
        if ("*" !== this.settings.allowedTypes && !t.type.match(this.settings.allowedTypes)) return this.settings.onFileTypeError.call(this.element, t), !1;
        if (null !== this.settings.extFilter) {
            var i = t.name.toLowerCase().split(".").pop();
            if (e.inArray(i, this.settings.extFilter) < 0) return this.settings.onFileExtError.call(this.element, t), !1
        }
        return new n(t, this)
    }, o.prototype.addFiles = function (e) {
        for (var t = 0, i = 0; i < e.length; i++) {
            var n = this.validateFile(e[i]);
            n && !1 !== this.settings.onNewFile.call(this.element, n.id, n.data) && (this.settings.auto && !this.settings.queue && n.upload(), this.queue.push(n), t++)
        }
        return 0 === t ? this : (this.settings.auto && this.settings.queue && !this.queueRunning && this.processQueue(), this)
    }, o.prototype.processQueue = function () {
        return this.queuePos++, this.queuePos >= this.queue.length ? (0 === this.activeFiles && this.settings.onComplete.call(this.element), this.queuePos = this.queue.length - 1, this.queueRunning = !1, !1) : (this.queueRunning = !0, this.queue[this.queuePos].upload())
    }, o.prototype.restartQueue = function () {
        this.queuePos = -1, this.queueRunning = !1, this.processQueue()
    }, o.prototype.findById = function (e) {
        for (var t = !1, i = 0; i < this.queue.length; i++)
            if (this.queue[i].id === e) {
                t = this.queue[i];
                break
            }
        return t
    }, o.prototype.cancelAll = function () {
        var e = this.queueRunning;
        this.queueRunning = !1;
        for (var t = 0; t < this.queue.length; t++) this.queue[t].cancel();
        e && this.settings.onComplete.call(this.element)
    }, o.prototype.startAll = function () {
        if (this.settings.queue) this.restartQueue();
        else
            for (var e = 0; e < this.queue.length; e++) this.queue[e].upload()
    }, o.prototype.methods = {
        start: function (t) {
            if (this.queueRunning) return !1;
            var i = !1;
            return void 0 === t || (i = this.findById(t)) ? i ? (4 === i.status && (i.status = 0), i.upload()) : (this.startAll(), !0) : (e.error("File not found in jQuery.dmUploader"), !1)
        },
        cancel: function (t) {
            var i = !1;
            return void 0 === t || (i = this.findById(t)) ? i ? i.cancel(!0) : (this.cancelAll(), !0) : (e.error("File not found in jQuery.dmUploader"), !1)
        },
        reset: function () {
            return this.cancelAll(), this.queue = [], this.queuePos = -1, this.activeFiles = 0, !0
        },
        destroy: function () {
            this.cancelAll(), this.releaseEvents(), this.element.removeData(t)
        }
    }, e.fn.dmUploader = function (i) {
        var n = arguments;
        if ("string" != typeof i) return this.each(function () {
            e.data(this, t) || e.data(this, t, new o(this, i))
        });
        this.each(function () {
            var s = e.data(this, t);
            s instanceof o ? "function" == typeof s.methods[i] ? s.methods[i].apply(s, Array.prototype.slice.call(n, 1)) : e.error("Method " + i + " does not exist in jQuery.dmUploader") : e.error("Unknown plugin data found by jQuery.dmUploader")
        })
    }
}), $(function () {
    var selected_section = [];
    $('.dropdown').click(function () {
        selected_section = [];
    });
    $('#start_upload').click(function () {
        $('.section_chb:checked').each(function (index) {
            selected_section[index] = $(this).val();
        });
    });
    $("#drag-and-drop-zone").dmUploader({
        url: "db/upload.php",
        maxFileSize: 1e8,
        auto: !1,
        queue: !0,
        allowedTypes: "image/*",
        extFilter: ["jpg", "jpeg", "png", "gif"],
        onDragEnter: function () {
            this.addClass("active")
        },
        onDragLeave: function () {
            this.removeClass("active")
        },
        onInit: function () {
            ui_add_log("Penguin initialized :)", "info")
        },
        onComplete: function () {
            ui_add_log("All pending tranfers finished")
        },
        onNewFile: function (e, t) {
            if (ui_add_log("New file added #" + e), ui_multi_add_file(e, t), "undefined" != typeof FileReader) {
                var i = new FileReader,
                    n = $("#uploaderFile" + e).find("img");
                i.onload = function (e) {
                    n.attr("src", e.target.result)
                }, i.readAsDataURL(t)
            }
        },
        onBeforeUpload: function (e) {
            ui_add_log("Starting the upload of #" + e), ui_multi_update_file_progress(e, 0, "", !0), ui_multi_update_file_status(e, "uploading", "Uploading...")
        },
        onUploadProgress: function (e, t) {
            ui_multi_update_file_progress(e, t)
        },
        onUploadSuccess: function (e, t) {
            ui_add_log("Server Response for file #" + e + ": " + JSON.stringify(t)), ui_add_log("Upload of file #" + e + " COMPLETED", "success"), ui_multi_update_file_status(e, "success", "Upload Complete"), ui_multi_update_file_progress(e, 100, "success", !1)
        },
        onUploadError: function (e, t, i, n) {
            ui_multi_update_file_status(e, "danger", n), ui_multi_update_file_progress(e, 0, "danger", !1)
        },
        onFallbackMode: function () {
            ui_add_log("Plugin cant be used here, running Fallback callback", "danger")
        },
        onFileSizeError: function (e) {
            ui_add_log("File '" + e.name + "' cannot be added: size excess limit", "danger")
        },
        onFileTypeError: function (e) {
            ui_add_log("File '" + e.name + "' cannot be added: must be an image (type error)", "danger")
        },
        onFileExtError: function (e) {
            ui_add_log("File '" + e.name + "' cannot be added: must be an image (extension error)", "danger")
        },
        extraData: function (e) {
            return {
                image_name: $("[id=uploaderFile" + e + "] > .media-body > .image_name").val(),
                image_alt: $("[id=uploaderFile" + e + "] > .media-body > .image_alt").val(),
                image_description: $("[id=uploaderFile" + e + "] > .media-body > .image_description").val(),
                section: JSON.stringify(selected_section)
            }
        }
    }), $("#start_upload").click(function () {
        $("#drag-and-drop-zone").dmUploader("start")
    })
});
